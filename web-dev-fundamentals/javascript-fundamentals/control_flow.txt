# CONTROL FLOW

## CONDITIONALS

in simple terms - control flow is the order in which instructions
are executed within a program.

### a quick word on syntax

[] are square brackets
{} are curly braces
() are parentheses

if
else if
if else

if (condition) {
    this code run if condition is true
} else {
    this code tun if condition is false
}

if (3 === 3) {
    console.log("this is three!");
} else {
    console.log("nothing");
}

function isSubstring(searchString, subString) {
  let search = searchString.toLowerCase();
  let sub = subString.toLowerCase();
  
  if (search.indexOf(sub) !== -1 ) {
      return true;
  } else {
      return false;
  }
}

console.log(isSubstring("The cat went to the store", "he cat went")); // => true
console.log(isSubstring("Time to program", "time")); // => true
console.log(isSubstring("Jump for joy", "joys")); // => false

## BASIC LOOPS

### while loops

while (condition) {
    // code block to be executed if condition is true
}

### for loops

for (<initial expressionl>;<condition>;<loopEnd expression)

for (let index = 0; index < 10; index += 1) {
    // the code inside this block will run 10 times
}

### simple projects

Log Between

function logBetween(lowNum, highNum) {
    if (lowNum > highNum) {
        console.log("");
    } else {
        while (lowNum <= highNum) {
            console.log(lowNum);
            lowNum++;
        }
    }
}

logBetween(4, 6); // prints out:
// 4
// 5
// 6

Print Fives

function printFives(max) {
    let num = 0;
    while (max > num) {
        console.log(num);
        num = num + 5;
    }
}

printFives(20) // prints out:
// 0
// 5
// 10
// 15

Log Between Stepper

function logBetweenStepper(min, max, step) {
    while (min <= max) {
        console.log(min);
        min+=step;
    }
}

logBetweenStepper(5, 9, 1); // prints out:
// 5
// 6
// 7
// 8
// 9

Fizz Buzz

function fizzBuzz(max) {
    let num = 0;
    while (max > num) {
        if (!(num % 3 === 0 && num % 5 === 0)) {
            if (num % 3 === 0) {
                console.log(num);
            } else if (num % 5 === 0) {
                console.log(num);
            }
        }
    num++;
    }
}

fizzBuzz(20); // prints out:
// 3
// 5
// 6
// 9
// 10
// 12
// 18

## arrays

let arr = [1, 3, 4, 5,];
console.log(arr[2]) // 4

### Calculating the length of an array

Since an array can contain any number of values you will find 
it useful to count the number of values available to you
using .length:

console.log([4, 7, 9].length); // => 3
console.log([1, 2].length); // => 2
console.log([].length); // => 0

console.log([1, 2, 3] + [4, 5, 6]); // => 1,2,34,5,6 
console.log([1, 2, 3].concat([4, 5, 6])); // => [1, 2, 3, 4, 5, 6]

### Manipulating arrays

Arrays also support ways to let you add and remove items from it.
Array.push(item) allows you to add items to the back of an array,
and Array.pop() removes the last item from the array. For example:

let arr = [1, 2, 3];
arr.push(4);
arr.push(5);
console.log(arr);   // => [1, 2, 3, 4, 5]
arr.pop();
console.log(arr);   // => [1, 2, 3, 4]

