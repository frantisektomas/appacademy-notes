Unity Test with JavaScript, HTML, and CSS
1. Setting Up the HTML Structure:
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Unity Test</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="unity-container"></div>
    <script src="UnityLoader.js"></script>
    <script src="script.js"></script>
</body>
</html>
2. Adding CSS (styles.css):
css
Copy code
body {
    margin: 0;
    overflow: hidden;
}

#unity-container {
    width: 100vw;
    height: 100vh;
}
3. Loading Unity (UnityLoader.js):
Download the UnityLoader.js file from the Unity website or use the one provided with your Unity project.

4. Writing JavaScript (script.js):
javascript
Copy code
var unityInstance = UnityLoader.instantiate("unity-container", "Build/YourUnityProject.json", { onProgress: UnityProgress });

// Add additional JavaScript logic related to your Unity project

// Example: Communicating with Unity
function sendMessageToUnity(message) {
    unityInstance.SendMessage("YourGameObject", "YourMethodName", message);
}
5. Testing JavaScript Functions:
In your Unity project, create a GameObject and attach a script with a method that can be called from JavaScript.

csharp
Copy code
using UnityEngine;

public class YourScript : MonoBehaviour
{
    public void YourMethodName(string message)
    {
        Debug.Log("Message from JavaScript: " + message);
    }
}
6. Testing CSS and Layout:
Ensure that the Unity container (#unity-container) takes up the entire viewport.

7. Running the Test:
Open the HTML file in a web browser.
Check the browser console for any JavaScript errors.
Ensure Unity content loads successfully.
8. Debugging:
Use browser developer tools to debug JavaScript.
Unity logs can be viewed in the browser console.
9. Additional Tips:
Ensure Unity WebGL build settings are configured properly.
Keep Unity, HTML, CSS, and JavaScript files in the correct directories.
