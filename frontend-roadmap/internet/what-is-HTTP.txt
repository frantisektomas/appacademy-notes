What is HTTP

First things first, what is HTTP? HTTP is a TCP/IP-based application layer
communication protocol that standardizes how clients and servers communicate
with each other. It defines how content is requested and transmitted across
the internet. By application layer protocol, I mean that it’s simply an
abstraction layer that standardizes how hosts (clients and servers) communicate.
HTTP itself depends on TCP/IP to get requests and responses between the client
and server. By default, TCP port 80 is used, but other ports can also be used.
HTTPS, however, uses port 443.

HTTP/0.9 - The One Liner (1991)

It was the simplest protocol ever; having a single method called GET.
If a client had to access some webpage on the server, it would have made the simple request like below

GET /index.html

As you can see, the protocol really had nothing more than being a stepping stone for what was to come.

HTTP/1.0 - 1996

Unlike HTTP/0.9 which was only designed for HTML response, HTTP/1.0 could now
deal with other response formats i.e. images, video files, plain text or any
other content type as well. It added more methods (i.e. POST and HEAD),
request/response formats got changed, HTTP headers got added to both the request
and responses, status codes were added to identify the response, character set
support was introduced, multi-part types, authorization, caching, content encoding and more was included.

Three-way Handshake

SYN - Client picks up a random number, let’s say x, and sends it to the server.
SYN ACK - Server acknowledges the request by sending an ACK packet back to the client
which is made up of a random number, let’s say y picked up by server and the number x+1 where x is the number that was sent by the client
ACK - Client increments the number y received from the server and sends an ACK packet back with the number y+1

HTTP/1.1 - 1997

New HTTP methods were added, which introduced PUT, PATCH, OPTIONS, DELETE
Hostname Identification In HTTP/1.0 Host header wasn’t required but HTTP/1.1 made it required.

SPDY - 2009

Google went ahead and started experimenting with alternative protocols to make the web faster and improving web security while reducing the latency of web pages. In 2009, they announced SPDY.
In 2015, at Google, they didn’t want to have two competing standards and so they decided to merge it into HTTP while giving birth to HTTP/2 and deprecating SPDY.

HTTP/2 - 2015

By now, you must be convinced that why we needed another revision of the HTTP protocol. HTTP/2 was designed for low latency transport of content.
The key features or differences from the old version of HTTP/1.1 include

1. Binary Protocol
HTTP/2 tends to address the issue of increased latency that existed in HTTP/1.x by
making it a binary protocol. Being a binary protocol, it easier to parse but
unlike HTTP/1.x it is no longer readable by the human eye. The major building
blocks of HTTP/2 are Frames and Streams

2. Multiplexing
Since HTTP/2 is now a binary protocol and as I said above that it uses frames and
streams for requests and responses, once a TCP connection is opened, all the
streams are sent asynchronously through the same connection without opening any
additional connections.

3. Header Compression
It was part of a separate RFC which was specifically aimed at optimizing the sent
headers. The essence of it is that when we are constantly accessing the server
from a same client there is alot of redundant data that we are sending in the
headers over and over, and sometimes there might be cookies increasing the headers
size which results in bandwidth usage and increased latency. To overcome this,
HTTP/2 introduced header compression.

4. Server Push
Server push is another tremendous feature of HTTP/2 where the server, knowing
that the client is going to ask for a certain resource, can push it to the client
without even client asking for it. For example, let’s say a browser loads a web
page, it parses the whole page to find out the remote content that it has to load
from the server and then sends consequent requests to the server to get that content.

5. Request Prioritization

A client can assign a priority to a stream by including the prioritization information
in the HEADERS frame by which a stream is opened. At any other time, client can send a PRIORITY frame to change the priority of a stream.

6. Security
There was extensive discussion on whether security (through TLS) should be made mandatory
for HTTP/2 or not. In the end, it was decided not to make it mandatory. However, most vendors
stated that they will only support HTTP/2 when it is used over TLS. So, although HTTP/2 doesn’t require
encryption by specs but it has kind of become mandatory by default anyway.
